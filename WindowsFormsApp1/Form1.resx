<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="directoryEntry1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rkJggg==
</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAKQAAAKIAAABBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACcAAADCAAAA/wAAAKIAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAnAAAAwgAAAP8AAADCAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAJwAAAMIAAAD/AAAAwgAAACcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAASAAAAHQAAABwAAAASAAAABAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcAAADCAAAA/wAAAMIAAAAnAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAACcAAABuAAAArQAAANEAAADgAAAA3wAA
        ANAAAACsAAAAbQAAACYAAAACAAAAAAAAAAAAAAAnAAAAwgAAAP8AAADCAAAAJwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAACDAAAA4gAAAP8AAAD+AAAA8gAA
        AOUAAADlAAAA8wAAAP4AAAD/AAAA4QAAAIEAAAAXAAAAJgAAAMIAAAD/AAAAwgAAACcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAwgAAAP8AAADxAAAArgAA
        AGIAAAA0AAAAIgAAACIAAAA0AAAAYgAAAK4AAADyAAAA/gAAAMQAAADJAAAA/wAAAMIAAAAnAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAANQAAAD/AAAAxQAA
        AEgAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAEgAAADGAAAA/wAAAP8AAADKAAAAJwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAADCAAAA/wAA
        ALAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAACwAAAA/wAA
        AMQAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAgwAA
        AP8AAADFAAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB8AAADGAAAA/wAAAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACcAAADhAAAA8wAAAEkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEoAAADzAAAA4AAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAbgAAAP8AAACuAAAACAAAAAAAAAAAAAAAAAAAABIAAAASAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAK8AAAD/AAAAbQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAACsAAAA/wAAAGIAAAAAAAAAAAAAAAAAAAAzAAAAxgAAAMYAAAAzAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAAAAP8AAACrAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAANAAAADyAAAANAAAAAAAAAAAAAAAAAAAAHMAAAD/AAAA/wAA
        AHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2AAAA8wAAAM8AAAASAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAAAAxAAAAMoAAAAeAAAAAAAAAAAAAAAAAAAAMwAA
        AMYAAADGAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMAAADmAAAA3wAA
        ABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAcAAAAHAAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIwAA
        AOYAAADfAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAAAaAAAAGgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAA2AAAA8wAAAM8AAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAAMcAAADHAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAGQAAAD/AAAAqwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAAA4gAAAOYAAAA0AAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAIAAAAsAAAAP8AAABtAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAADhAAAA/gAAAN4AAACnAAAANwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsAAADzAAAA4AAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAAMUAAADiAAAA7QAA
        AP8AAADcAAAANwAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAxwAAAP8AAACBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAGwAA
        AB8AAAAvAAAAqAAAAP8AAACmAAAABQAAAAAAAAAAAAAAHwAAALEAAAD/AAAAwAAAABkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAHEAAABxAAAADwAA
        AAAAAAAAAAAAAAAAAAAAAAAxAAAA7gAAANoAAAAZAAAAAAAAAA0AAACxAAAA/wAAANEAAAAyAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAAAA2gAA
        AO4AAAAxAAAAAAAAAAAAAAAAAAAAAAAAADEAAADuAAAA2gAAABkAAAAAAAAAAQAAAIQAAADAAAAAMQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAUAAACmAAAA/wAAAKgAAAAvAAAAHgAAAB4AAAAvAAAAqAAAAP8AAACmAAAABQAAAAAAAAAAAAAAEAAA
        ABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAADcAAADcAAAA/wAAAO0AAADiAAAA4gAAAO0AAAD/AAAA3AAAADgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcAAACnAAAA2wAAAOIAAADiAAAA2wAAAKcAAAA4AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAYAAAAHgAAAB4AAAAZAAAABgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////P////j////wf///4P///8H/+B+D/8ADB/+AAA//AAAf/gf
        gP/wf+D/4P/w/+H/+H/hz/h/w4f8P8OH/D/Dh/w/w8/8P/+H/D//h/w//4P4f/+B+H//gPD//4Bg//h4
        Qf/4eEP/+ABn//wA///+Af///wP///////8=
</value>
  </data>
</root>